{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(hc) {\n    this.hc = hc;\n    this.subject = new Subject();\n  }\n  createUser(userObj) {\n    return this.hc.post('/user/createuser', userObj);\n  }\n  createProduct(productObj) {\n    return this.hc.post('/product/createproduct', productObj);\n  }\n  loginUser(loginObj) {\n    return this.hc.post('/user/login', loginObj);\n  }\n  loginAdmin(loginObj) {\n    return this.hc.post('/admin/login', loginObj);\n  }\n  sendloginState(loginState) {\n    this.subject.next(loginState);\n  }\n  getProductsAdventure() {\n    return this.hc.get('/product/getproductsadventure');\n  }\n  createAdmin(adminObj) {\n    return this.hc.post('/admin/createadmin', adminObj);\n  }\n  receiveloginState() {\n    return this.subject.asObservable();\n  }\n  updateAdminProducts(adminReqObj) {\n    return this.hc.post('/product/updateadminproduct', adminReqObj);\n  }\n  deleteAdminProducts(prod_id) {\n    return this.hc.post('/product/deleteproduct', prod_id);\n  }\n  getAllaffliateProductstoUsers() {\n    return this.hc.get('/product/getAllAffliatesUsers');\n  }\n  // service to get books based on category\n  getProducts(localUser) {\n    return this.hc.post('/product/getproducts', localUser);\n  }\n  addtoCart(book) {\n    return this.hc.post('/user/userCartAdd', book);\n  }\n  getCart(username) {\n    return this.hc.post('/user/getCart', username);\n  }\n  removeFromCart(item) {\n    return this.hc.post('/user/deletefromcart', item);\n  }\n  addAddress(addObj) {\n    return this.hc.post('/user/addAddress', addObj);\n  }\n  getAddress(user) {\n    return this.hc.post('/user/getAddress', user);\n  }\n  deleteAddress(user) {\n    return this.hc.post('/user/deleteUserAddress', user);\n  }\n  selectedAddressSetup(orders) {\n    return this.hc.post('/user/orders', orders);\n  }\n  cardSave(cardDetails) {\n    return this.hc.post('/user/cardAdd', cardDetails);\n  }\n  getCards(cardObj) {\n    return this.hc.post('/user/getUserCards', cardObj);\n  }\n  makePaymentFinal(user) {\n    return this.hc.post('/user/makePayment', user);\n  }\n  makePaymentFinalStep(user) {\n    return this.hc.post('/user/makePaymentNext', user);\n  }\n  sendDatatoAddress(receivedAddress) {\n    this.address = receivedAddress;\n  }\n  receiveFinalAddress() {\n    return this.address;\n  }\n  deleteCard(cardIndex) {\n    return this.hc.post('/user/deletecard', cardIndex);\n  }\n  getOrders(username) {\n    return this.hc.post('/user/getOrders', username);\n  }\n  checkDelete(cart) {\n    return this.hc.post('/product/checkDeleted', cart);\n  }\n  getProductsById(id) {\n    return this.hc.post('/product/getSingleProduct', id);\n  }\n  // wishlist\n  moveToWishlistFromStore(book) {\n    return this.hc.post('/user/userWishListAdd', book);\n  }\n  getproductsFromWishlist(userObj) {\n    return this.hc.post('/user/getAllProductsToUsersFromWishlist', userObj);\n  }\n  deleteProductFromWishlist(wishprod) {\n    return this.hc.post('/user/deleteproductfromwishlist', wishprod);\n  }\n  moveToCartFromWishlist(wishprod) {\n    return this.hc.post('/user/movetocartfromwishlist', wishprod);\n  }\n  getProductwithid(prodobj) {\n    return this.hc.post('/product/getproductwithid', prodobj);\n  }\n  getprofile(userObj) {\n    return this.hc.post('/user/getuserprofile', userObj);\n  }\n  changepassword(userpass) {\n    return this.hc.post('/user/changepassword', userpass);\n  }\n  getSales(adminObj) {\n    return this.hc.post('/admin/getSales', adminObj);\n  }\n  createAffliate(productObj) {\n    return this.hc.post('/product/createaffliate', productObj);\n  }\n  c_items(username) {\n    return this.hc.get(`admin/getCarousel/${username}`);\n  }\n  verifyRequestAdmin(email) {\n    return this.hc.post('admin/verifyAdmin', email);\n  }\n  getAdminVeifyStatus() {\n    let emailObj = {\n      email: sessionStorage.getItem('admin_email')\n    };\n    return this.hc.post(`admin/getVerificationStatus`, emailObj);\n  }\n  sendEmail(email) {\n    return this.hc.post('admin/sendemail', {\n      email: email\n    });\n  }\n}\nDataService.ɵfac = function DataService_Factory(t) {\n  return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n};\nDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}