{"ast":null,"code":"import { Subscriber } from '../Subscriber';\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile(predicate) {\n  return source => source.lift(new SkipWhileOperator(predicate));\n}\nclass SkipWhileOperator {\n  constructor(predicate) {\n    this.predicate = predicate;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber extends Subscriber {\n  constructor(destination, predicate) {\n    super(destination);\n    this.predicate = predicate;\n    this.skipping = true;\n    this.index = 0;\n  }\n  _next(value) {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n  tryCallPredicate(value) {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n//# sourceMappingURL=skipWhile.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}