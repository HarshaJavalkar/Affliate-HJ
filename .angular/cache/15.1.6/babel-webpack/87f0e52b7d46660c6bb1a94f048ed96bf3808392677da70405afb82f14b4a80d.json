{"ast":null,"code":"import { SessionStorage } from './storage.session';\nimport { LocalStorage } from './storage.local';\nimport { ImmutableMemoryStorage } from './storage.immutable_memory';\nimport { MemoryStorage } from './storage.memory';\nimport { StorageType } from '../../constants/persistence.storage_type';\n/**\n * A factory used to retrieve Storage objects\n *\n * @export\n * \\@class StorageFactory\n *\n * @author Scott O'Bryan\n * \\@since 1.0\n */\nexport var StorageFactory = function () {\n  function StorageFactory() {\n    this._storages = [];\n  }\n  /**\n   * Returns a new instance of the storage factory.\n   *\n   * \\@static\n   * @return {?}\n   */\n  StorageFactory.getStorage = function () {\n    return new StorageFactory();\n  };\n  /**\n   * Returns a singleton object of a specified type.  Storage\n   * types are initialized lazily.\n   *\n   * @param {?} type\n   * @return {?}\n   */\n  StorageFactory.prototype.of = function (type) {\n    var /** @type {?} */storage = this._storages[type];\n    if (!storage) {\n      switch (type) {\n        case StorageType.MEMORY:\n          storage = new MemoryStorage();\n          this._storages[type] = storage;\n          break;\n        case StorageType.IMMUTABLE_MEMORY:\n          storage = new ImmutableMemoryStorage();\n          break;\n        case StorageType.LOCAL:\n          storage = new LocalStorage();\n          break;\n        case StorageType.SESSION:\n          storage = new SessionStorage();\n          break;\n        default:\n      }\n      if (!storage || !storage.available()) {\n        throw new Error('Storage type not available');\n      }\n      this._storages[type] = storage;\n    }\n    return storage;\n  };\n  return StorageFactory;\n}();\nfunction StorageFactory_tsickle_Closure_declarations() {\n  /** @type {?} */\n  StorageFactory.prototype._storages;\n}\n//# sourceMappingURL=storage.factory.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}