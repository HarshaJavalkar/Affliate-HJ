{"ast":null,"code":"var /** @type {?} */INFO_KEY = '__INFO';\n/**\n * An internal object used to track items saved by a storage object within the persistence\n * framework.\n *\n * @export\n * \\@class ContainerInfo\n *\n * @author Scott O'Bryan\n * \\@since 1.0\n */\nexport var ContainerInfo = function () {\n  /**\n   * @param {?} _namespace\n   * @param {?} _container\n   */\n  function ContainerInfo(_namespace, _container) {\n    this._namespace = _namespace;\n    this._container = _container;\n    var infoObj = _container.get(this._namespace);\n    // If we have an existing object, check its type\n    if (infoObj) {\n      if (typeof infoObj !== 'object' || !infoObj[INFO_KEY]) {\n        throw new Error('Potential attribute conflict detected');\n      }\n    }\n  }\n  /**\n   * Adds a key to this info object.\n   *\n   * @param {?} key\n   * @return {?}\n   */\n  ContainerInfo.prototype.addAttribute = function (key) {\n    var /** @type {?} */item = this._getInfo();\n    item[key] = true;\n    this._setInfo(item);\n  };\n  /**\n   * Removes a key from this info object.\n   *\n   * @param {?} key\n   * @return {?}\n   */\n  ContainerInfo.prototype.removeAttribute = function (key) {\n    var /** @type {?} */info = this._getInfo();\n    delete info[key];\n    this._setInfo(info);\n  };\n  /**\n   * Returns a list of keys that have been added to this\n   * info object.\n   *\n   * @return {?}\n   */\n  ContainerInfo.prototype.getAttributes = function () {\n    return Object.keys(this._getInfo()).filter(function (key) {\n      return key !== INFO_KEY;\n    });\n  };\n  /**\n   * Checks to see if the value stored in the _namespace\n   * is an info object or if it is empty.  If it is NOT\n   * an info object, then false is returned.\n   *\n   * @return {?}\n   */\n  ContainerInfo.prototype.available = function () {\n    var /** @type {?} */infoObj = this._container.get(this._namespace);\n    return !infoObj || typeof infoObj === 'object' && infoObj[INFO_KEY];\n  };\n  /**\n   * @return {?}\n   */\n  ContainerInfo.prototype._getInfo = function () {\n    var /** @type {?} */obj = this._container.get(this._namespace);\n    if (!obj) {\n      obj = {};\n      obj[INFO_KEY] = true;\n    }\n    return obj;\n  };\n  /**\n   * @param {?} info\n   * @return {?}\n   */\n  ContainerInfo.prototype._setInfo = function (info) {\n    // this is 1 because the info identifier will be there.\n    if (Object.keys(info).length <= 1) {\n      this._container.remove(this._namespace);\n    } else {\n      this._container.set(this._namespace, info);\n    }\n  };\n  return ContainerInfo;\n}();\nfunction ContainerInfo_tsickle_Closure_declarations() {\n  /** @type {?} */\n  ContainerInfo.prototype._namespace;\n  /** @type {?} */\n  ContainerInfo.prototype._container;\n}\n//# sourceMappingURL=storage.container_info.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}