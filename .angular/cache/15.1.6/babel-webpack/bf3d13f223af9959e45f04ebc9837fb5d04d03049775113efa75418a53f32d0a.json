{"ast":null,"code":"var __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { MemoryStorage } from './storage.memory';\n/**\n * Storage type for immutable memory\n *\n * @export\n * \\@class ImmutableMemoryStorage\n *\n * @author Scott O'Bryan\n * \\@since 1.0\n */\nexport var ImmutableMemoryStorage = function (_super) {\n  __extends(ImmutableMemoryStorage, _super);\n  function ImmutableMemoryStorage() {\n    _super.apply(this, arguments);\n  }\n  /**\n   * Sets a value in memory storage after stringifying the object.  This\n   * add some overhead but ensures each copy of the object is immutable.\n   *\n   * @param {?} key\n   * @param {?} value\n   * @return {?}\n   */\n  ImmutableMemoryStorage.prototype.set = function (key, value) {\n    if (value !== undefined) {\n      value = JSON.stringify(value);\n    }\n    return _super.prototype.set.call(this, key, value);\n  };\n  /**\n   * Returns an immutable value for the specified key.\n   *\n   * @param {?} key\n   * @return {?}\n   */\n  ImmutableMemoryStorage.prototype.get = function (key) {\n    var /** @type {?} */value = _super.prototype.get.call(this, key);\n    if (value !== undefined) {\n      return JSON.parse(value);\n    }\n    return undefined;\n  };\n  return ImmutableMemoryStorage;\n}(MemoryStorage);\n//# sourceMappingURL=storage.immutable_memory.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}